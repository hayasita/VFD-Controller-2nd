#pragma once
#include <vector>
#include <mutex>

// テスト用 Mock EepromManager
class MockEepromManager {
public:
    void begin() {
        memory.resize(512, 0);
    }

    std::recursive_mutex& getMutex() {
        return eepromMutex;
    }

    bool writeBytes(int address, const void* data, size_t len) {
        if (address + len > memory.size()) return false;
        const uint8_t* bytes = static_cast<const uint8_t*>(data);
        for (size_t i = 0; i < len; ++i) {
            memory[address + i] = bytes[i];
        }
        return true;
    }

    bool readBytes(int address, void* data, size_t len) {
        if (address + len > memory.size()) return false;
        uint8_t* bytes = static_cast<uint8_t*>(data);
        for (size_t i = 0; i < len; ++i) {
            bytes[i] = memory[address + i];
        }
        return true;
    }

private:
    std::vector<uint8_t> memory;
    std::recursive_mutex eepromMutex;
};
